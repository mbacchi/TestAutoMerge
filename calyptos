#!/usr/bin/env python

from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter, SUPPRESS
from fabric.colors import yellow
from fabric.network import disconnect_all
from fabric.operations import run as fabric_run
from fabric.state import env
from fabric.tasks import execute as fabric_execute
from stevedore import driver as plugin_driver
from stevedore import extension
from calyptos.rolebuilder import RoleBuilder
import getpass
import os
import sys
import shutil
import platform

dot_dir = os.path.expanduser('~/.calyptos')
# by default we look in users home dir first
default_cfgfile = os.path.join(dot_dir, "config.yml")
cfglist = []
cfglist.append(default_cfgfile)
cfglist.append('/usr/share/calyptos/config.yml')

default_branch = 'euca-4.2'
default_cookbook_repo = 'https://github.com/eucalyptus/eucalyptus-cookbook'
default_driver = 'chef'
default_namespace = 'calyptos.deployer'


def locate_cfgfile():
    # if we find that the config file is in /usr/share
    # but the rpm is not installed, we copy it to ~/.calyptos
    # because that means calyptos was installed by setup.py
    for item in cfglist:
        mi = None
        if os.path.isfile(item):
            if item != default_cfgfile:
                if platform.system() == "Linux":
                    try:
                        import rpm
                    except ImportError:
                        # if we can't import the rpm module
                        # we will just return the /usr/share cfgfile
                        return item
                    ts = rpm.TransactionSet()
                    mi = ts.dbMatch("name", "calyptos")
                    if (len(mi) == 0):
                        if not os.path.isfile(default_cfgfile):
                            if not os.path.exists(dot_dir):
                                try:
                                    os.makedirs(dot_dir)
                                except OSError as e:
                                    print('Error: cannot create directory ~/.calyptos: %s' % e)
                            try:
                                # if this copy works, return default_cfgfile
                                # because it will be used going forward
                                shutil.copy('/usr/share/calyptos/config.yml', default_cfgfile)
                                return default_cfgfile
                            except shutil.Error as e:
                                print('Error: %s' % e)
                            except IOError as e:
                                print('Error: %s' % e.strerror)
            # this is not in an else: block because its a
            # last resort for the case where import rpm
            # doesn't succeed above, because we still need
            # to return a valid config file name
            return item

def run_driver(argp, operation, namespace=None, driver=None):
    namespace = namespace or argp.namespace or default_namespace
    driver = driver or argp.driver or default_driver
    mgr = plugin_driver.DriverManager(
            namespace=namespace,
            name=driver,
            invoke_on_load=True,
            invoke_args=(argp.password,
                         argp.environment,
                         argp.config,
                         argp.debug,
                         argp.branch,
                         argp.cookbook_repo,
                         argp.update_repo),
        )
    function = getattr(mgr.driver, operation)
    function()


def validate(argp):
    """
    Validate a config prior to deploying
    """
    component_deployer = RoleBuilder(argp.environment)
    mgr = extension.ExtensionManager(
            namespace='calyptos.validator',
            invoke_args=(component_deployer,),
            invoke_on_load=True,
            propagate_map_exceptions=True
        )
    return mgr.map_method('validate')


def prepare(argp):
    """
    Ensure pre-deployment dependencies, access, etc..
    """
    run_driver(argp=argp, operation='prepare')


def bootstrap(argp):
    """
    Init Euca DB, and backend deps prior to config
    """
    run_driver(argp=argp, operation='bootstrap')


def provision(argp):
    """
    Provisions or updates the configuration of a system
    """
    run_driver(argp=argp, operation='provision')


def uninstall(argp):
    """
    Attempts to uninstall/undo the provisioned system
    """
    run_driver(argp=argp, operation='uninstall')


def execute(argp, command=None, role=None):
    """
    Execute a `task` honoring host/roles, etc.
    """
    role = role or argp.role
    command = command or argp.execute_command
    component_deployer = RoleBuilder(argp.environment)
    env.hosts = component_deployer.roles[role]
    env.password = argp.password
    env.user = 'root'
    env.parallel = True
    try:
        fabric_execute(fabric_run, command, hosts=component_deployer.roles[role])
    finally:
        disconnect_all()


def debug(argp):
    """
    Gather all debug info/artifacts from a system
    """
    component_deployer = RoleBuilder(argp.environment)
    mgr = extension.ExtensionManager(
            namespace='calyptos.debugger',
            invoke_args=(component_deployer,),
            invoke_on_load=True,
            propagate_map_exceptions=False
        )
    results = mgr.map_method('debug')
    total_failures = 0
    total_passed = 0
    for passed, failed in results:
        total_passed += passed
        total_failures += failed
    print yellow('Total passed: ' + str(total_passed))
    print yellow('Total failed: ' + str(total_failures))
    exit(total_failures)


def add_subparser(subparsers, func, title=None, helpstr=None,
                  formatter_class=ArgumentDefaultsHelpFormatter, branch=default_branch,
                  cookbook_repo=default_cookbook_repo, driver=default_driver,
                  environment=True, password=True, update_repo=True):
    """
    Add a subparser to the main/parent argparser. This will handle arguments for the
    matching driver operations
    """
    helpstr = helpstr or func.func_doc
    title = title or func.func_name
    myparser = subparsers.add_parser(title,
                                     help=helpstr,
                                     description=helpstr,
                                     formatter_class=formatter_class)
    if branch:
        myparser.add_argument('-b', '--branch', default=branch, help='branch')
    if cookbook_repo:
        myparser.add_argument('--cookbook-repo', default=cookbook_repo,
                              help='Alternate eucalyptus-cookbook repo to use')
    if driver:
        myparser.add_argument('-d', '--driver', default=driver, help='driver')
    if environment:
        myparser.add_argument('-e', '--environment', default=None, required=True,
                              help='Path to the environment file that defines the system Calyptos '
                                   'will interact with')
    if password:
        myparser.add_argument('-p', '--password', default=None,
                              help='SSH password for machines that Calyptos will interact with')
    if update_repo:
        myparser.add_argument('--no-update-repo', default=True, action='store_false', dest='update_repo',
                              help='Do not pull changes from eucalyptus-cookbook origin.')
    return myparser


if __name__ == '__main__':

    # Create the parent parser for common attributes
    commons = ArgumentParser(add_help=False)
    commons.add_argument('-c', '--config', default=locate_cfgfile(),
                         help='Path to the configuration file for Calyptos')
    commons.add_argument('-n', '--namespace', default=default_namespace, help=SUPPRESS)
    commons.add_argument('--ignore-known-hosts', default=False, action='store_true')
    commons.add_argument('--debug', default=False, action='store_true')

    # Create the main parser
    parser = ArgumentParser(description='Calyptos cloud deployment tool',
                            parents=[commons],
                            formatter_class=ArgumentDefaultsHelpFormatter, add_help=False)

    def do_help():
        """
        Show Calyptos Base Help Menu Options
        """
        return parser.print_help()

    subparsers = parser.add_subparsers(help='COMMANDS', dest='command')
    subparsers.default = 'help'

    add_subparser(subparsers, validate)
    add_subparser(subparsers, prepare)
    add_subparser(subparsers, bootstrap)
    add_subparser(subparsers, provision)
    add_subparser(subparsers, debug)
    add_subparser(subparsers, uninstall)
    help_subp = add_subparser(subparsers, do_help, title='help', branch=None, cookbook_repo=None,
                              driver=None)
    help_subp.print_usage = help_subp.print_help
    # Add the subparser for execute which accepts different args than the other options...
    execute_subp = add_subparser(subparsers, execute, branch=None, cookbook_repo=None, driver=None)
    execute_subp.add_argument('execute_command', metavar='EXECUTE_COMMAND',
                              help='Command to run against role members')
    execute_subp.add_argument('-r', '--role', default='all', help='role')

    # When using subparsers the parent only prints usage, print_help is more useful...
    parser.print_usage = parser.print_help
    try:
        import argcomplete
        argcomplete.autocomplete(parser)
    except:
        pass
    try:
        argp = parser.parse_args()
    except Exception as PE:
        parser.print_help()
        print str(PE)
        exit(1)

    sub_command_name = argp.command
    if sub_command_name == 'help':
        do_help()
        exit(0)
    # Map the subcommand to a function for the underlying operation to be executed...
    sub_commands = {'validate': validate,
                    'prepare': prepare,
                    'bootstrap': bootstrap,
                    'provision': provision,
                    'execute': execute,
                    'debug': debug,
                    'uninstall': uninstall}
    sub_command = sub_commands.get(sub_command_name, None)
    if not sub_command:
        parser.print_help()
        raise parser.error('unknown subcommand:"{0}", Supported Commands:"{1}"'
                           .format(sub_command_name,
                                   ", ".join(str(x) for x in sub_commands.iterkeys())))

    if hasattr(argp, 'environment'):
        # Test if the provided environment file is present and readable...
        with open(argp.environment) as envfile:
            pass
    # If the sub parser requested a password and it wasnt provided, prompt the user for it...
    if hasattr(argp, 'password') and argp.password is None:
        password = getpass.getpass('\n\tEnter the SSH password for hosts in the deployment: ')
        setattr(argp, 'password', str(password).strip())
    if argp.ignore_known_hosts:
        env.disable_known_hosts = True
        print yellow('Ignoring known hosts will leave you wide open to man-in-the-middle attacks! '
                     'Please use with caution.')
    # Finally execute the requested operation's function
    sub_command(argp)
    disconnect_all()
    exit(0)
